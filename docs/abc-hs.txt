-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/aslemen/abc-hs#readme</a>
@package abc-hs
@version 20190420


-- | Provide an type class type of which supports pretty serialization in
--   the munge-trees style, comparable to the Show class in Prelude.
module PTDumpable

-- | <a>TreeStyle</a> specifies the serialization style of trees.
data TreeStyle

-- | Each tree is serialized in one line.
OneLine :: TreeStyle

-- | Each tree is serialized prettily in the same way of munge-trees.
Pretty :: TreeStyle

-- | <a>NodeStyle</a> speficies the serialized style of node labels.
data NodeStyle

-- | Each node is serialized as short as is possible.
Minimal :: NodeStyle

-- | Each node is serialized normally.
Default :: NodeStyle

-- | Each node is serialized with full information.
Full :: NodeStyle

-- | <a>Option</a> bundles all the serialization options mentioned above.
data Option
Option :: TreeStyle -> NodeStyle -> Option

-- | The serialization style of tree structures.
[treeStyle] :: Option -> TreeStyle

-- | The serialization style of nodes.
[nodeStyle] :: Option -> NodeStyle

-- | <a>Dumpable</a> is a class of types which support the munge-trees
--   style serialization of trees. A tree is serialized with
--   <a>Builder</a>, which needs further conversion to Data.Text or others.
class (Show a) => Dumpable a

-- | Serialize a tree with options.
psdDump :: Dumpable a => Option -> a -> Builder

-- | Serialized a tree with the default option.
--   
--   <ul>
--   <li><a>treeStyle</a>: <a>Pretty</a></li>
--   <li><a>nodeStyle</a>: <a>Default</a></li>
--   </ul>
psdDumpDefault :: Dumpable a => a -> Builder
instance GHC.Show.Show PTDumpable.Option
instance GHC.Classes.Eq PTDumpable.Option
instance GHC.Show.Show PTDumpable.NodeStyle
instance GHC.Classes.Eq PTDumpable.NodeStyle
instance GHC.Show.Show PTDumpable.TreeStyle
instance GHC.Classes.Eq PTDumpable.TreeStyle
instance PTDumpable.Dumpable GHC.Base.String
instance PTDumpable.Dumpable Data.Text.Internal.Text
instance PTDumpable.Dumpable Data.Text.Internal.Lazy.Text
instance PTDumpable.Dumpable Data.Text.Internal.Builder.Builder


-- | Provide an representation of categories of the Kainoki Treebank. The
--   parser is available at the <a>Parser</a> module.
module KaiCat

-- | <a>KaiCat</a> represents Kainoki categories.
data KaiCat

-- | A Kainoki category.
KaiCat :: [Text] -> Int -> Text -> KaiCat

-- | The category name, separated by hyphens.
[catlist] :: KaiCat -> [Text]

-- | The ICH index. 0 for non-indexed cases.
[iched] :: KaiCat -> Int

-- | The sort information. Empty when none.
[sortInfo] :: KaiCat -> Text

-- | Construct a non-indexed, non-sort-infoed Kainoki category.
createBase :: [Text] -> KaiCat
instance GHC.Classes.Eq KaiCat.KaiCat
instance PTDumpable.Dumpable KaiCat.KaiCat
instance GHC.Show.Show KaiCat.KaiCat

module DepMarking
data DepMarking
Head :: DepMarking
Adjunct :: DepMarking
Complement :: DepMarking
AdjunctControl :: DepMarking
None :: DepMarking
createMarking :: Text -> DepMarking
instance GHC.Classes.Eq DepMarking.DepMarking
instance GHC.Show.Show DepMarking.DepMarking
instance PTDumpable.Dumpable DepMarking.DepMarking

module DepMarked
data DepMarked cat
(:|) :: cat -> DepMarking -> DepMarked cat
[category] :: DepMarked cat -> cat
[dependency] :: DepMarked cat -> DepMarking
markCat :: Text -> cat -> DepMarked cat
marker :: Text
instance GHC.Classes.Eq cat => GHC.Classes.Eq (DepMarked.DepMarked cat)
instance GHC.Show.Show cat => GHC.Show.Show (DepMarked.DepMarked cat)
instance PTDumpable.Dumpable cat => PTDumpable.Dumpable (DepMarked.DepMarked cat)
instance GHC.Base.Functor DepMarked.DepMarked

module ABCComment
data ABCComment a
ABCComment :: a -> Text -> ABCComment a
[content] :: ABCComment a -> a
[comment] :: ABCComment a -> Text
instance GHC.Classes.Eq a => GHC.Classes.Eq (ABCComment.ABCComment a)
instance PTDumpable.Dumpable a => PTDumpable.Dumpable (ABCComment.ABCComment a)
instance GHC.Show.Show a => GHC.Show.Show (ABCComment.ABCComment a)
instance GHC.Base.Functor ABCComment.ABCComment
instance GHC.Base.Applicative ABCComment.ABCComment
instance GHC.Base.Monad ABCComment.ABCComment


-- | Provide an representation of categories of the ABC Grammar. The parser
--   is available at the <a>Parser</a> module.
module ABCCategory

-- | <a>ABCCategory</a> represents ABC categories.
data ABCCategory

-- | The Bottom âŠ¥.
Bottom :: ABCCategory

-- | An atomic catetory.
BaseCategory :: Text -> ABCCategory

-- | The name of the category.
[name] :: ABCCategory -> Text

-- | A functor category <tt><a>X\C</a></tt> which takes an <tt>X</tt> to
--   its left as its argument.
LeftFunctor :: ABCCategory -> ABCCategory -> ABCCategory

-- | The argument, corresponding to the <tt>X</tt> above.
[antecedent] :: ABCCategory -> ABCCategory

-- | The base, corresponding to the <tt>C</tt> above.
[consequence] :: ABCCategory -> ABCCategory

-- | A functor category <tt><a>C/X</a></tt> which takes an X to its right
--   as its argument.
RightFunctor :: ABCCategory -> ABCCategory -> ABCCategory

-- | The argument, corresponding to the <tt>X</tt> above.
[antecedent] :: ABCCategory -> ABCCategory

-- | The base, corresponding to the <tt>C</tt> above.
[consequence] :: ABCCategory -> ABCCategory
data ABCStatusFC

-- | Indicating that a left reduction/functional-composition rule is used.
FCLeft :: Int -> ABCStatusFC

-- | Indicating that a right reduction/functional-composition rule is used.
FCRight :: Int -> ABCStatusFC

-- | Indicating that the reduction cannot be achieved.
Failed :: ABCStatusFC

-- | The text representation of the bottom.
strBot :: Text

-- | Compose two categories to form a right functor category.
--   
--   Example:
--   
--   <pre>
--   &gt;&gt;&gt; (BaseCategory "VP") &lt;/&gt; (BaseCategory "NP")
--   RightFunctor (BaseCategory "NP") (BaseCategory "VP")
--   </pre>
(</>) :: ABCCategory -> ABCCategory -> ABCCategory

-- | Make an endomorphic adjunct <tt><a>X\X</a></tt> from a category
--   <tt>X</tt>.
--   
--   Example:
--   
--   <pre>
--   &gt;&gt;&gt; makeLeftAdjunct (BaseCategory "S")
--   LeftFunctor (BaseCategory "S") (BaseCategory "S")
--   </pre>
makeLeftAdjunct :: ABCCategory -> ABCCategory

-- | Compose two categories to form a left functor category.
--   
--   Example:
--   
--   <pre>
--   &gt;&gt;&gt; (BaseCategory "NP") &lt;\&gt; (BaseCategory "S")
--   LeftFunctor (BaseCategory "NP") (BaseCategory "S")
--   </pre>
(<\>) :: ABCCategory -> ABCCategory -> ABCCategory

-- | Make an endomorphic adjunct <tt><a>X/X</a></tt> from a category
--   <tt>X</tt>.
--   
--   Example:
--   
--   <pre>
--   &gt;&gt;&gt; makeRightAdjunct (BaseCategory "S")
--   RightFunctor (BaseCategory "S") (BaseCategory "S")
--   </pre>
makeRightAdjunct :: ABCCategory -> ABCCategory

-- | Taking two ABC categories, try a reduction from them.
(<^>) :: ABCCategory -> ABCCategory -> ABCCategory

-- | Taking two ABC categories, try a reduction from them, leaving the
--   trace of the used rule.
reduceWithResult :: ABCCategory -> ABCCategory -> State ABCStatusFC ABCCategory
reduceWithLog :: ABCCategory -> ABCCategory -> ABCComment ABCCategory
instance GHC.Classes.Eq ABCCategory.ABCStatusFC
instance PTDumpable.Dumpable ABCCategory.ABCStatusFC
instance GHC.Show.Show ABCCategory.ABCStatusFC
instance GHC.Base.Semigroup ABCCategory.ABCStatusFC
instance GHC.Base.Monoid ABCCategory.ABCStatusFC
instance GHC.Classes.Eq ABCCategory.ABCCategory
instance PTDumpable.Dumpable ABCCategory.ABCCategory
instance GHC.Show.Show ABCCategory.ABCCategory


-- | Provide an representation of parsed trees, reexported from Data.Tree
--   (provided by containers). The parser is available at the
--   <tt>ParseParser</tt> module.
module ParsedTree
getUnary :: Tree term -> Maybe (Tree term)
isUnary :: Tree term -> Bool
justTerminal :: Tree term -> Maybe term
isTerminal :: Tree term -> Bool
getNearTerminal :: Tree term -> Maybe term
isNearTerminal :: Tree term -> Bool
filterNearTerminal :: (term -> Bool) -> Tree term -> Maybe term
isFilterNearTerminal :: (term -> Bool) -> Tree term -> Bool
instance PTDumpable.Dumpable term => PTDumpable.Dumpable (Data.Tree.Tree term)

module ParsedTree.Parser
data TermParsers term
TermParsers :: Parser term -> Parser term -> TermParsers term
[pTermMany] :: TermParsers term -> Parser term
[pTermSome] :: TermParsers term -> Parser term
class TermParsable term
getDefaultTermParsers :: TermParsable term => TermParsers term
parser :: forall term. TermParsers term -> Parser (Tree term)
pBracketedString :: Parser (Tokens Text)
createFromString :: TermParsers term -> String -> Text -> Either (ParseErrorBundle Text Void) (Tree term)
parserDoc :: TermParsers term -> Parser [Tree term]
createDoc :: TermParsers term -> String -> Text -> Either (ParseErrorBundle Text Void) [Tree term]

-- | A non-empty collection of <a>ParseError</a>s equipped with
--   <a>PosState</a> that allows to pretty-print the errors efficiently and
--   correctly.
data ParseErrorBundle s e
ParseErrorBundle :: NonEmpty (ParseError s e) -> PosState s -> ParseErrorBundle s e

-- | A collection of <a>ParseError</a>s that is sorted by parse error
--   offsets
[bundleErrors] :: ParseErrorBundle s e -> NonEmpty (ParseError s e)

-- | State that is used for line/column calculation
[bundlePosState] :: ParseErrorBundle s e -> PosState s
instance ParsedTree.Parser.TermParsable Data.Text.Internal.Text

module DepMarked.Parser
pPlainMarked :: Parser (DepMarked Text)
instance ParsedTree.Parser.TermParsable (DepMarked.DepMarked Data.Text.Internal.Text)

module ABCCategory.Parser
pABCCategory :: Parser ABCCategory
pABCCategoryCommented :: Parser (ABCComment ABCCategory)
createABCCategoryCommentedFromString :: Text -> Either (ParseErrorBundle Text Void) (ABCComment ABCCategory)
createABCCategoryFromString :: Text -> Either (ParseErrorBundle Text Void) ABCCategory
instance ParsedTree.Parser.TermParsable ABCCategory.ABCCategory
instance ParsedTree.Parser.TermParsable (ABCComment.ABCComment ABCCategory.ABCCategory)
