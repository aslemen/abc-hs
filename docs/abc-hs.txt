-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/aslemen/abc-hs#readme</a>
@package abc-hs
@version 20190420


-- | Provide an type class type of which supports pretty serialization in
--   the munge-trees style, comparable to the Show class in Prelude.
module PTDumpable

-- | <a>TreeStyle</a> specifies the serialization style of trees.
data TreeStyle

-- | Each tree is serialized in one line.
OneLine :: TreeStyle

-- | Each tree is serialized prettily in the same way of munge-trees.
Pretty :: TreeStyle

-- | <a>NodeStyle</a> speficies the serialized style of node labels.
data NodeStyle

-- | Each node is serialized as short as is possible.
Minimal :: NodeStyle

-- | Each node is serialized normally.
Default :: NodeStyle

-- | Each node is serialized with full information.
Full :: NodeStyle

-- | <a>Option</a> bundles all the serialization options mentioned above.
data Option
Option :: TreeStyle -> NodeStyle -> Option

-- | The serialization style of tree structures.
[treeStyle] :: Option -> TreeStyle

-- | The serialization style of nodes.
[nodeStyle] :: Option -> NodeStyle

-- | <a>Dumpable</a> is a class of types which support the munge-trees
--   style serialization of trees. A tree is serialized with
--   <a>Builder</a>, which needs further conversion to Data.Text or others.
class (Show a) => Dumpable a

-- | Serialize a tree with options.
psdDump :: Dumpable a => Option -> a -> Builder

-- | Serialized a tree with the default option.
--   
--   <ul>
--   <li><a>treeStyle</a>: <a>Pretty</a></li>
--   <li><a>nodeStyle</a>: <a>Default</a></li>
--   </ul>
psdDumpDefault :: Dumpable a => a -> Builder
instance GHC.Show.Show PTDumpable.Option
instance GHC.Classes.Eq PTDumpable.Option
instance GHC.Show.Show PTDumpable.NodeStyle
instance GHC.Classes.Eq PTDumpable.NodeStyle
instance GHC.Show.Show PTDumpable.TreeStyle
instance GHC.Classes.Eq PTDumpable.TreeStyle
instance PTDumpable.Dumpable GHC.Base.String
instance PTDumpable.Dumpable Data.Text.Internal.Text
instance PTDumpable.Dumpable Data.Text.Internal.Lazy.Text
instance PTDumpable.Dumpable Data.Text.Internal.Builder.Builder

module PTPrintable

-- | <a>TreeStyle</a> specifies the serialization style of trees.
data TreeStyle

-- | Each tree is serialized in one line.
OneLine :: TreeStyle

-- | Each tree is serialized prettily in the same way of munge-trees.
Pretty :: TreeStyle

-- | <a>NodeStyle</a> speficies the serialized style of node labels.
data NodeStyle

-- | Each node is serialized as short as is possible.
Minimal :: NodeStyle

-- | Each node is serialized normally.
Default :: NodeStyle

-- | Each node is serialized with full information.
Full :: NodeStyle

-- | <a>Option</a> bundles all the serialization options mentioned above.
data Option
Option :: TreeStyle -> NodeStyle -> Option

-- | The serialization style of tree structures.
[treeStyle] :: Option -> TreeStyle

-- | The serialization style of nodes.
[nodeStyle] :: Option -> NodeStyle
class (Show a) => Printable a
psdPrint :: Printable a => Option -> a -> String
psdPrintDefault :: Printable a => a -> String
instance PTPrintable.Printable GHC.Base.String

module KeyakiCategory
data KeyakiCategory
KeyakiCategory :: [String] -> String -> String -> KeyakiCategory
[catlist] :: KeyakiCategory -> [String]
[iched] :: KeyakiCategory -> String
[sortInfo] :: KeyakiCategory -> String
createBase :: [String] -> KeyakiCategory
parser :: Parser KeyakiCategory

-- | generate an Keyaki-Category from a string or a stream.
createFromString :: String -> Either ParseError KeyakiCategory

-- | The abstract data type <tt>ParseError</tt> represents parse errors. It
--   provides the source position (<a>SourcePos</a>) of the error and a
--   list of error messages (<a>Message</a>). A <tt>ParseError</tt> can be
--   returned by the function <a>parse</a>. <tt>ParseError</tt> is an
--   instance of the <a>Show</a> and <a>Eq</a> classes.
data ParseError
instance GHC.Classes.Eq KeyakiCategory.KeyakiCategory
instance GHC.Show.Show KeyakiCategory.KeyakiCategory
instance PTPrintable.Printable KeyakiCategory.KeyakiCategory

module DepMarking
data DepMarking
Head :: DepMarking
Adjunct :: DepMarking
Complement :: DepMarking
AdjunctControl :: DepMarking
None :: DepMarking
createMarking :: Text -> DepMarking
instance GHC.Classes.Eq DepMarking.DepMarking
instance GHC.Show.Show DepMarking.DepMarking
instance PTPrintable.Printable DepMarking.DepMarking
instance PTDumpable.Dumpable DepMarking.DepMarking

module DepMarked
data DepMarked cat
(:|) :: cat -> DepMarking -> DepMarked cat
[category] :: DepMarked cat -> cat
[dependency] :: DepMarked cat -> DepMarking
markCat :: Text -> cat -> DepMarked cat
marker :: Text
instance GHC.Classes.Eq cat => GHC.Classes.Eq (DepMarked.DepMarked cat)
instance GHC.Show.Show cat => GHC.Show.Show (DepMarked.DepMarked cat)
instance PTPrintable.Printable cat => PTPrintable.Printable (DepMarked.DepMarked cat)
instance PTDumpable.Dumpable cat => PTDumpable.Dumpable (DepMarked.DepMarked cat)
instance GHC.Base.Functor DepMarked.DepMarked

module ABCComment
data ABCComment a
ABCComment :: a -> Text -> ABCComment a
[content] :: ABCComment a -> a
[comment] :: ABCComment a -> Text
instance GHC.Classes.Eq a => GHC.Classes.Eq (ABCComment.ABCComment a)
instance PTDumpable.Dumpable a => PTDumpable.Dumpable (ABCComment.ABCComment a)
instance GHC.Show.Show a => GHC.Show.Show (ABCComment.ABCComment a)
instance PTPrintable.Printable a => PTPrintable.Printable (ABCComment.ABCComment a)
instance GHC.Base.Functor ABCComment.ABCComment
instance GHC.Base.Applicative ABCComment.ABCComment
instance GHC.Base.Monad ABCComment.ABCComment


-- | Provide an representation of categories of the ABC Grammar. The parser
--   is available at the <a>Parser</a> module.
module ABCCategory

-- | <a>ABCCategory</a> represents ABC categories.
data ABCCategory

-- | The Bottom âŠ¥.
Bottom :: ABCCategory

-- | An atomic catetory.
BaseCategory :: Text -> ABCCategory

-- | The name of the category.
[name] :: ABCCategory -> Text

-- | A functor category <tt><a>X\C</a></tt> which takes an <tt>X</tt> to
--   its left as its argument.
LeftFunctor :: ABCCategory -> ABCCategory -> ABCCategory

-- | The argument, corresponding to the <tt>X</tt> above.
[antecedent] :: ABCCategory -> ABCCategory

-- | The base, corresponding to the <tt>C</tt> above.
[consequence] :: ABCCategory -> ABCCategory

-- | A functor category <tt><a>C/X</a></tt> which takes an X to its right
--   as its argument.
RightFunctor :: ABCCategory -> ABCCategory -> ABCCategory

-- | The argument, corresponding to the <tt>X</tt> above.
[antecedent] :: ABCCategory -> ABCCategory

-- | The base, corresponding to the <tt>C</tt> above.
[consequence] :: ABCCategory -> ABCCategory
data ABCComment a
ABCComment :: a -> Text -> ABCComment a
[content] :: ABCComment a -> a
[comment] :: ABCComment a -> Text
type ABCCategoryCommented = ABCComment ABCCategory
data ABCStatusFC
FCLeft :: Int -> ABCStatusFC
FCRight :: Int -> ABCStatusFC
Failed :: ABCStatusFC

-- | The text representation of the bottom.
strBot :: Text

-- | Compose two categories to form a right functor category.
--   
--   Example:
--   
--   <pre>
--   &gt;&gt;&gt; (BaseCategory "VP") &lt;/&gt; (BaseCategory "NP")
--   RightFunctor (BaseCategory "NP") (BaseCategory "VP")
--   </pre>
(</>) :: ABCCategory -> ABCCategory -> ABCCategory
makeLeftAdjunct :: ABCCategory -> ABCCategory

-- | Compose two categories to form a left functor category.
--   
--   Example:
--   
--   <pre>
--   &gt;&gt;&gt; (BaseCategory "NP") &lt;\&gt; (BaseCategory "S")
--   LeftFunctor (BaseCategory "NP") (BaseCategory "S")
--   </pre>
(<\>) :: ABCCategory -> ABCCategory -> ABCCategory
makeRightAdjunct :: ABCCategory -> ABCCategory
(<^>) :: ABCCategory -> ABCCategory -> ABCCategory
reduceWithResult :: ABCCategory -> ABCCategory -> (ABCCategory, ABCStatusFC)
reduceWithLog :: ABCCategory -> ABCCategory -> ABCCategoryCommented
instance GHC.Classes.Eq ABCCategory.ABCStatusFC
instance PTDumpable.Dumpable ABCCategory.ABCStatusFC
instance GHC.Show.Show ABCCategory.ABCStatusFC
instance GHC.Classes.Eq ABCCategory.ABCCategory
instance PTDumpable.Dumpable ABCCategory.ABCCategory
instance GHC.Show.Show ABCCategory.ABCCategory
instance PTPrintable.Printable ABCCategory.ABCCategory

module ParsedTree

-- | Non-empty, possibly infinite, multi-way trees; also known as <i>rose
--   trees</i>.
data Tree a
Node :: a -> Forest a -> Tree a

-- | label value
[rootLabel] :: Tree a -> a

-- | zero or more child trees
[subForest] :: Tree a -> Forest a
type Forest a = [Tree a]
getUnary :: Tree term -> Maybe (Tree term)
isUnary :: Tree term -> Bool
justTerminal :: Tree term -> Maybe term
isTerminal :: Tree term -> Bool
getNearTerminal :: Tree term -> Maybe term
isNearTerminal :: Tree term -> Bool
filterNearTerminal :: (term -> Bool) -> Tree term -> Maybe term
isFilterNearTerminal :: (term -> Bool) -> Tree term -> Bool
instance PTDumpable.Dumpable term => PTDumpable.Dumpable (Data.Tree.Tree term)
instance PTPrintable.Printable term => PTPrintable.Printable (Data.Tree.Tree term)

module ParsedTree.Parser
data TermParsers term
TermParsers :: Parser term -> Parser term -> TermParsers term
[pTermMany] :: TermParsers term -> Parser term
[pTermSome] :: TermParsers term -> Parser term
class TermParsable term
getDefaultTermParsers :: TermParsable term => TermParsers term
parser :: forall term. TermParsers term -> Parser (Tree term)
pBracketedString :: Parser (Tokens Text)
createFromString :: TermParsers term -> String -> Text -> Either (ParseErrorBundle Text Void) (Tree term)
parserDoc :: TermParsers term -> Parser [Tree term]
createDoc :: TermParsers term -> String -> Text -> Either (ParseErrorBundle Text Void) [Tree term]

-- | A non-empty collection of <a>ParseError</a>s equipped with
--   <a>PosState</a> that allows to pretty-print the errors efficiently and
--   correctly.
data ParseErrorBundle s e
ParseErrorBundle :: NonEmpty (ParseError s e) -> PosState s -> ParseErrorBundle s e

-- | A collection of <a>ParseError</a>s that is sorted by parse error
--   offsets
[bundleErrors] :: ParseErrorBundle s e -> NonEmpty (ParseError s e)

-- | State that is used for line/column calculation
[bundlePosState] :: ParseErrorBundle s e -> PosState s
instance ParsedTree.Parser.TermParsable Data.Text.Internal.Text

module DepMarked.Parser
pPlainMarked :: Parser (DepMarked Text)
instance ParsedTree.Parser.TermParsable (DepMarked.DepMarked Data.Text.Internal.Text)

module ABCCategory.Parser
pABCCategory :: Parser ABCCategory
pABCCategoryCommented :: Parser ABCCategoryCommented
createABCCategoryCommentedFromString :: Text -> Either (ParseErrorBundle Text Void) ABCCategoryCommented
createABCCategoryFromString :: Text -> Either (ParseErrorBundle Text Void) ABCCategory
instance ParsedTree.Parser.TermParsable ABCCategory.ABCCategory
instance ParsedTree.Parser.TermParsable ABCCategory.ABCCategoryCommented
