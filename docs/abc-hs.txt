-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/aslemen/abc-hs#readme</a>
@package abc-hs
@version 20200801


-- | Provide an representation of categories of the ABC Grammar.
module ABCCat

-- | <a>ABCCat</a> represents ABC categories.
data ABCCat

-- | The Bottom âŠ¥.
Bottom :: ABCCat

-- | An atomic catetory.
BaseCategory :: Text -> ABCCat

-- | The name of the category.
[name] :: ABCCat -> Text

-- | A functor category <tt><a>X\C</a></tt> which takes an <tt>X</tt> to
--   its left as its argument.
LeftFunctor :: ABCCat -> ABCCat -> ABCCat

-- | The argument, corresponding to the <tt>X</tt> above.
[antecedent] :: ABCCat -> ABCCat

-- | The base, corresponding to the <tt>C</tt> above.
[consequence] :: ABCCat -> ABCCat

-- | A functor category <tt><a>C/X</a></tt> which takes an X to its right
--   as its argument.
RightFunctor :: ABCCat -> ABCCat -> ABCCat

-- | The argument, corresponding to the <tt>X</tt> above.
[antecedent] :: ABCCat -> ABCCat

-- | The base, corresponding to the <tt>C</tt> above.
[consequence] :: ABCCat -> ABCCat

-- | Compose two categories to form a left functor category.
--   
--   Example:
--   
--   <pre>
--   &gt;&gt;&gt; (BaseCategory "NP") :\: (BaseCategory "S")
--   LeftFunctor (BaseCategory "NP") (BaseCategory "S")
--   </pre>
pattern (:\:) :: ABCCat -> ABCCat -> ABCCat

-- | Compose two categories to form a right functor category.
--   
--   Example:
--   
--   <pre>
--   &gt;&gt;&gt; (BaseCategory "VP") :/: (BaseCategory "NP")
--   RightFunctor (BaseCategory "NP") (BaseCategory "VP")
--   </pre>
pattern (:/:) :: ABCCat -> ABCCat -> ABCCat
infixl 9 :\:
infixl 9 :/:

-- | <a>ABCStatusFC</a> represents the rule which has been used in a
--   process of reduction.
data ABCStatusFC

-- | Indicating that a left reduction/functional-composition rule is used.
FCLeft :: Int -> ABCStatusFC

-- | Indicating that a right reduction/functional-composition rule is used.
FCRight :: Int -> ABCStatusFC

-- | Indicating that the reduction cannot be achieved.
Failed :: ABCStatusFC

-- | The text representation of the bottom.
strBot :: Text

-- | Taking two ABC categories, try a reduction from them, leaving the
--   trace of the used rule.
(<^#>) :: ABCCat -> ABCCat -> (ABCStatusFC, ABCCat)
infix 6 <^#>

-- | Taking two ABC categories, try a reduction from them.
(<^>) :: ABCCat -> ABCCat -> ABCCat
infixr 6 <^>
instance GHC.Classes.Eq ABCCat.ABCStatusFC
instance GHC.Show.Show ABCCat.ABCStatusFC
instance Data.Text.Prettyprint.Doc.Internal.Pretty ABCCat.ABCStatusFC
instance GHC.Base.Semigroup ABCCat.ABCStatusFC
instance GHC.Base.Monoid ABCCat.ABCStatusFC
instance GHC.Classes.Eq ABCCat.ABCCat
instance Data.Text.Prettyprint.Doc.Internal.Pretty ABCCat.ABCCat
instance GHC.Show.Show ABCCat.ABCCat
instance Data.Tree.Parser.Penn.Megaparsec.Char.UnsafelyParsableAsTerm Data.Text.Internal.Text ABCCat.ABCCat


-- | Provide an representation of categories of the Kainoki Treebank. The
--   parser is available at the <a>Parser</a> module.
module ABCDepMarking
data DepMarking
Head :: DepMarking
Adjunct :: DepMarking
Complement :: DepMarking
AdjunctControl :: DepMarking
None :: DepMarking
parseDepMarking :: Ord e => ParsecT e Text m DepMarking
instance GHC.Classes.Eq ABCDepMarking.DepMarking
instance GHC.Show.Show ABCDepMarking.DepMarking
instance Data.Text.Prettyprint.Doc.Internal.Pretty ABCDepMarking.DepMarking


-- | Provide an representation of categories of the Kainoki Treebank. The
--   parser is available at the <a>Parser</a> module.
module CatPlus

-- | Record structure that represents (Keyaki) tree node labels which are
--   augmented with our own additional attributes.
data CatPlus cat

-- | A terminal node label, which contains nothing other than a word.
Term :: Text -> CatPlus cat

-- | A word.
[word] :: CatPlus cat -> Text

-- | A non-terminal node label comprised of a (Keyaki or ABC) category and
--   additional optional information for the ABC relabeling.
NonTerm :: cat -> Maybe Int -> DepMarking -> Text -> [Int] -> [(Int, cat)] -> Map Text Text -> CatPlus cat

-- | A (Keyaki / ABC) category.
[cat] :: CatPlus cat -> cat

-- | An ICH index on overt parts of ICH configufations.
[index] :: CatPlus cat -> Maybe Int

-- | A grammatical role in the ABC Grammar.
[role] :: CatPlus cat -> DepMarking

-- | The special ABC derivational rule (e.g. unary rules), if any, invoked
--   by this node. Empty as default.
[deriv] :: CatPlus cat -> Text
[scope] :: CatPlus cat -> [Int]

-- | A list of covert arguments (<tt>*pro*</tt> in Keyaki), each specified
--   with its scopal rank in the clause and its category.
[covertArgs] :: CatPlus cat -> [(Int, cat)]

-- | Other attributes.
[attrs] :: CatPlus cat -> Map Text Text
pattern (:#:) :: cat -> (cat -> CatPlus cat) -> CatPlus cat
pattern (:#||:) :: (cat, DepMarking) -> (cat -> DepMarking -> CatPlus cat) -> CatPlus cat
infix 9 :#:
infix 9 :#||:

-- | Smart constructor that generates a non-terminal categorial
--   representation without attributes, given a Keyaki category.
newNonTerm :: cat -> CatPlus cat
getCat :: CatPlus cat -> (Maybe cat, cat -> CatPlus cat)
instance GHC.Base.Functor CatPlus.CatPlus
instance GHC.Classes.Eq cat => GHC.Classes.Eq (CatPlus.CatPlus cat)
instance Data.Tree.Parser.Penn.Megaparsec.Char.UnsafelyParsableAsTerm Data.Text.Internal.Text cat => Data.Tree.Parser.Penn.Megaparsec.Char.UnsafelyParsableAsTerm Data.Text.Internal.Text (CatPlus.CatPlus cat)
instance Data.Text.Prettyprint.Doc.Internal.Pretty cat => Data.Text.Prettyprint.Doc.Internal.Pretty (CatPlus.CatPlus cat)
instance GHC.Show.Show cat => GHC.Show.Show (CatPlus.CatPlus cat)


-- | Provide an representation of categories of the Kainoki Treebank. The
--   parser is available at the <a>Parser</a> module.
module KeyakiCat

-- | Record structure that represents simple Keyaki categories.
newtype KeyakiCat
KeyakiCat :: [Text] -> KeyakiCat
[unwrapCat] :: KeyakiCat -> [Text]
instance Data.Tree.Parser.Penn.Megaparsec.Char.UnsafelyParsableAsTerm Data.Text.Internal.Text KeyakiCat.KeyakiCat
instance GHC.Show.Show KeyakiCat.KeyakiCat
instance Data.Text.Prettyprint.Doc.Internal.Pretty KeyakiCat.KeyakiCat


-- | Provide an representation of parsed trees, reexported from Data.Tree
--   (provided by containers). The parser is available at the
--   <tt>ParseParser</tt> module.
module ParsedTree
instance Data.Text.Prettyprint.Doc.Internal.Pretty term => Data.Text.Prettyprint.Doc.Internal.Pretty (Data.Tree.Tree term)
